#include<stdlib.h>
#include <iostream>

using namespace std;

class Node {
    public:
        int data;
        Node* next;
        
        //Constructor
        Node(int d) {
            this->data = d;
            this->next = NULL;
        }
        
        //Destructor
        ~Node() {
            int val = this->data;
            if(this->next != NULL) {
                delete next;
                next = NULL;
            }
            cout<<"Memory free for Node with data "<<val<<endl;
        }
};

void print(Node* tail) {
    Node* temp = tail;

    if(tail == NULL) {
        cout<<"List is empty"<<endl;
        return;
    }
    
    do {
        cout<<tail->data<<" ";
        tail = tail->next;
    } while(tail != temp);
    cout<<endl;
}

void insertNode(Node* &tail, int element, int d) {
    //Assuming that the element is present in the list
    
    //Empty list
    if(tail == NULL) {
        Node* newNode = new Node(d);
        tail = newNode;
        newNode->next = newNode;
    }
    //Non-Empty List
    else {
        Node* curr = tail;
        while(curr->data != element) {
            curr = curr->next;
        }
        
        Node* temp = new Node(d);
        temp->next = curr->next;
        curr->next = temp;
    }
}

void deleteNode(Node* &tail, int value) {
    if(tail == NULL) {
        cout<<"List is empty"<<endl;
        return;
    }
    else {
        //Non empty- Assuming that Valueis present in the Linked List
        Node* prev = tail;
        Node* curr = prev->next;
        
        while(curr->data != value) {
            prev = curr;
            curr = curr->next;
        }
        
        prev->next = curr->next;
        
        //1 Node LinkedList
        if(curr == prev) {
            tail == NULL;
        }
        
        //All other cases
        if(tail == curr) {
            tail = prev;
        }
        curr->next = NULL;
        delete curr; 
    }
}

int main()
{
    Node* tail = NULL;
    
    insertNode(tail, 5, 3); 
    print(tail);
    
    insertNode(tail, 3, 5); 
    print(tail);
    
    insertNode(tail, 5, 7); 
    print(tail);
    
    insertNode(tail, 7, 9); 
    print(tail);

    insertNode(tail, 5, 6); 
    print(tail);
    
    insertNode(tail, 9, 10); 
    print(tail);
    
    insertNode(tail, 3, 4); 
    print(tail);
    
    
    deleteNode(tail, 3);
    print(tail);

    
    return 0;
}
